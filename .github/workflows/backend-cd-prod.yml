name: Backend CD Prod Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [self-hosted, prod]

    steps:
      - name: Checkout project repository
        uses: actions/checkout@v4

      - name: Create application-secret.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.PROD_SECRET_YML }}" > src/main/resources/application-secret.yml

      - name: JAR build using gradle
        run: |
          chmod +x ./gradlew
          sudo ./gradlew clean build

      - name: Get jar name and path info
        id: jar_name
        run: |
          BUILD_JAR_PATH=$(find ./build/libs -name "*.jar" ! -name "*plain.jar" | head -n 1)
          echo "BUILD_JAR_PATH=${BUILD_JAR_PATH}" >> $GITHUB_OUTPUT
          echo "BUILD_JAR_NAME=$(basename ${BUILD_JAR_PATH})" >> $GITHUB_OUTPUT

      - name: Deploy to EC2
        env:
          WAS_PORT: ${{ secrets.WAS_PORT }}
          SHUTDOWN_WAIT_TIME: ${{ secrets.SHUTDOWN_WAIT_TIME }}
        run: |
          # 1. 이전 WAS 종료 (Graceful Shutdown)
          echo "Stopping old Spring WAS..."
          PID=$(sudo lsof -t -i:${WAS_PORT} || true)
          if [ -n "$PID" ]; then
            echo "Found running process with PID: $PID. Sending SIGTERM."
            sudo kill -SIGTERM $PID
            # 프로세스 종료 대기
            for i in $(seq 1 ${SHUTDOWN_WAIT_TIME}); do
              if ! sudo kill -0 $PID 2>/dev/null; then
                echo "Process $PID has terminated."
                break
              fi
              echo "Waiting for process $PID to terminate... ($i/${SHUTDOWN_WAIT_TIME})"
              sleep 1
            done
            if sudo kill -0 $PID 2>/dev/null; then
              echo "Process $PID did not terminate gracefully. Forcing shutdown with SIGKILL."
              sudo kill -9 $PID
              sleep 3
            fi
          else
            echo "No process found on port ${WAS_PORT}."
          fi

          # 2. 이전 JAR 파일 삭제 및 빌드 JAR 파일 복사
          echo "Deleting old JAR files..."
          DEPLOY_DIRECTORY="/home/ubuntu/${{ github.event.repository.name }}"
          echo "DEPLOY_DIRECTORY=${DEPLOY_DIRECTORY}"
          mkdir -p "${DEPLOY_DIRECTORY}"
          sudo find "${DEPLOY_DIRECTORY}" -maxdepth 1 -name "*.jar" -delete
          echo "Old JAR files deleted."

          BUILD_JAR_PATH="${{ steps.jar_name.outputs.BUILD_JAR_PATH }}"
          BUILD_JAR_NAME="${{ steps.jar_name.outputs.BUILD_JAR_NAME }}"
          DEPLOY_JAR_PATH="${DEPLOY_DIRECTORY}/${BUILD_JAR_NAME}"
          echo "BUILD_JAR_PATH=${BUILD_JAR_PATH}"
          echo "BUILD_JAR_NAME=${BUILD_JAR_NAME}"
          echo "DEPLOY_JAR_PATH=${DEPLOY_JAR_PATH}"
          sudo cp "${BUILD_JAR_PATH}" "${DEPLOY_JAR_PATH}"
          echo "New JAR file copied."

          # 3. 새로운 WAS 실행
          echo "Starting new Spring WAS..."
          LOG_PATH="${DEPLOY_DIRECTORY}/application.log"
          echo "LOG_PATH=${LOG_PATH}"

          sudo nohup java -jar -Duser.timezone=Asia/Seoul "${DEPLOY_JAR_PATH}" --spring.profiles.active=prod --server.port=${WAS_PORT} &
          for i in $(seq 1 30); do
            if sudo lsof -t -i:${WAS_PORT} > /dev/null; then
              echo "WAS has started and is listening on port ${WAS_PORT}."
              break
            fi
            echo "Waiting for port ${WAS_PORT} to be occupied... ($i/30)"
            sleep 1
          done

          NEW_WAS_PID=$(sudo lsof -t -i:${WAS_PORT} || true)
          if [ -n "$NEW_WAS_PID" ]; then
            echo "Application started with PID: $NEW_WAS_PID."
          else
            echo "Error: Application failed to start."
            exit 1;
          fi
          echo "Deployment complete."
